// Code generated by protoc-gen-go-cel-validate. DO NOT EDIT.
// versions:
//  protoc-gen-go-cel-validate	{{PluginVersion}}
//  protoc						{{ProtocVersion}}
// source: {{.Desc.Path}}

package {{.GoPackageName}}

{{$file := .}}

var (
    _{{.GoDescriptorIdent.GoName}}_rawValidateOptions = []byte{
        {{ range $i, $value := (protoMarshal .Config) -}}
        {{ printf "0x%02x, " $value}}{{- if and $i (mod $i 16) }}{{print "\n"}}{{end}}
        {{- end }}
    }
    {{.GoDescriptorIdent.GoName}}_validate_manager *{{validate "Manager"}}
)

func init() {
    opt := &{{validate "Options"}}{}
    if err := {{proto "Unmarshal"}}(_{{$file.GoDescriptorIdent.GoName}}_rawValidateOptions, opt); err != nil {
        panic(err)
    }
    vm, err := {{validate "NewManager"}}({{.GoDescriptorIdent.GoName}}, {{validate "WithOptions"}}(opt))
    if err != nil {
        panic(err)
    }
    {{.GoDescriptorIdent.GoName}}_validate_manager = vm  
}

{{ range $s := .Services }}
func New{{.GoName}}ValidateProgram() ({{validate "ServiceRuleValidater"}}, error) {
    return {{$file.GoDescriptorIdent.GoName}}_validate_manager.GetServiceRuleValidater(
        {{$file.GoDescriptorIdent.GoName}}.Services().Get({{$s.Desc.Index}}),
    )
}
{{- end}}

{{range $messageNo,$m := .Messages}}
{{if $m.ContainsValidatePrograms}}

func (m *{{$m.GoIdent.GoName}}) Validate(ctx {{context "Context"}}) error {
    return m.ValidateWithMask(ctx, &{{fieldmaskpb "FieldMask"}}{
        Paths: []string{"*"},
    })
}

func (m *{{$m.GoIdent.GoName}}) ValidateWithMask(ctx {{context "Context"}}, fm *{{fieldmaskpb "FieldMask"}}) error {
    rv, err := {{$file.GoDescriptorIdent.GoName}}_validate_manager.GetMessageRuleValidater(m.ProtoReflect().Descriptor())
    if err != nil {
        return err
    }
    return rv.ValidateWithMask(ctx, m, fm)
}
{{else}}
func (m *{{$m.GoIdent.GoName}}) Validate(ctx {{context "Context"}}) error {
	return nil
}

func (m *{{$m.GoIdent.GoName}}) ValidateWithMask(ctx {{context "Context"}}, fm *{{fieldmaskpb "FieldMask"}}) error {
    return nil
}
{{end}}
{{end}}