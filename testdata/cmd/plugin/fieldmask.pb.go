// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: testdata/cmd/plugin/fieldmask.proto

package plugin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldmaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *FieldmaskRequest_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *FieldmaskRequest) Reset() {
	*x = FieldmaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_cmd_plugin_fieldmask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldmaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldmaskRequest) ProtoMessage() {}

func (x *FieldmaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_cmd_plugin_fieldmask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldmaskRequest.ProtoReflect.Descriptor instead.
func (*FieldmaskRequest) Descriptor() ([]byte, []int) {
	return file_testdata_cmd_plugin_fieldmask_proto_rawDescGZIP(), []int{0}
}

func (x *FieldmaskRequest) GetData() *FieldmaskRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FieldmaskRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type FieldmaskRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FieldmaskRequest_Data) Reset() {
	*x = FieldmaskRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_cmd_plugin_fieldmask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldmaskRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldmaskRequest_Data) ProtoMessage() {}

func (x *FieldmaskRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_cmd_plugin_fieldmask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldmaskRequest_Data.ProtoReflect.Descriptor instead.
func (*FieldmaskRequest_Data) Descriptor() ([]byte, []int) {
	return file_testdata_cmd_plugin_fieldmask_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FieldmaskRequest_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_testdata_cmd_plugin_fieldmask_proto protoreflect.FileDescriptor

var file_testdata_cmd_plugin_fieldmask_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x63, 0x6d, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x2a, 0xd2, 0x49, 0x27, 0x0a, 0x25, 0x12, 0x23, 0x12, 0x21, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x73,
	0x6b, 0x28, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x29, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x3e,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xd2, 0x49, 0x1f, 0x0a, 0x1d, 0x12, 0x1b, 0x12, 0x19, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x22, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x60,
	0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e,
	0x6c, 0x61, 0x63, 0x68, 0x66, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x63, 0x65, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testdata_cmd_plugin_fieldmask_proto_rawDescOnce sync.Once
	file_testdata_cmd_plugin_fieldmask_proto_rawDescData = file_testdata_cmd_plugin_fieldmask_proto_rawDesc
)

func file_testdata_cmd_plugin_fieldmask_proto_rawDescGZIP() []byte {
	file_testdata_cmd_plugin_fieldmask_proto_rawDescOnce.Do(func() {
		file_testdata_cmd_plugin_fieldmask_proto_rawDescData = protoimpl.X.CompressGZIP(file_testdata_cmd_plugin_fieldmask_proto_rawDescData)
	})
	return file_testdata_cmd_plugin_fieldmask_proto_rawDescData
}

var file_testdata_cmd_plugin_fieldmask_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_testdata_cmd_plugin_fieldmask_proto_goTypes = []interface{}{
	(*FieldmaskRequest)(nil),      // 0: testdata.cmd.plugin.FieldmaskRequest
	(*FieldmaskRequest_Data)(nil), // 1: testdata.cmd.plugin.FieldmaskRequest.Data
	(*fieldmaskpb.FieldMask)(nil), // 2: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),         // 3: google.protobuf.Empty
}
var file_testdata_cmd_plugin_fieldmask_proto_depIdxs = []int32{
	1, // 0: testdata.cmd.plugin.FieldmaskRequest.data:type_name -> testdata.cmd.plugin.FieldmaskRequest.Data
	2, // 1: testdata.cmd.plugin.FieldmaskRequest.field_mask:type_name -> google.protobuf.FieldMask
	0, // 2: testdata.cmd.plugin.FieldmaskService.Fieldmask:input_type -> testdata.cmd.plugin.FieldmaskRequest
	3, // 3: testdata.cmd.plugin.FieldmaskService.Fieldmask:output_type -> google.protobuf.Empty
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_testdata_cmd_plugin_fieldmask_proto_init() }
func file_testdata_cmd_plugin_fieldmask_proto_init() {
	if File_testdata_cmd_plugin_fieldmask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testdata_cmd_plugin_fieldmask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldmaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_cmd_plugin_fieldmask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldmaskRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testdata_cmd_plugin_fieldmask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testdata_cmd_plugin_fieldmask_proto_goTypes,
		DependencyIndexes: file_testdata_cmd_plugin_fieldmask_proto_depIdxs,
		MessageInfos:      file_testdata_cmd_plugin_fieldmask_proto_msgTypes,
	}.Build()
	File_testdata_cmd_plugin_fieldmask_proto = out.File
	file_testdata_cmd_plugin_fieldmask_proto_rawDesc = nil
	file_testdata_cmd_plugin_fieldmask_proto_goTypes = nil
	file_testdata_cmd_plugin_fieldmask_proto_depIdxs = nil
}
