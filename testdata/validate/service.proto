syntax = "proto3";

package testdata.validate;
option go_package = "github.com/nlachfr/protoc-gen-cel-validate/testdata/validate";

import "google/protobuf/empty.proto";
import "validate/validate.proto";

service Service {
    rpc Rpc(google.protobuf.Empty) returns (google.protobuf.Empty) {};
}

service ServiceExpr {
    option (cel.validate.service) = {
        rule: {
            programs: {
                expr: 'attribute_context.request.headers["x-is-admin"] == "true"'
            }
        }
    };
    rpc Rpc(google.protobuf.Empty) returns (google.protobuf.Empty) {};
}

service ServicePeerExpr {
    option (cel.validate.service) = {
        rule: {
            programs: {
                expr: 'attribute_context.origin.ip == "127.0.0.1"'
            }
        }
    };
    rpc Rpc(google.protobuf.Empty) returns (google.protobuf.Empty) {};
}

service ServiceOptions {
    option (cel.validate.service) = {
        rule: {
            programs: {
                expr: 'attribute_context.request.headers[isAdmHdr] == "true"'
            }
        }
    };
    rpc Rpc(google.protobuf.Empty) returns (google.protobuf.Empty) {};
}

service ServiceLocalOptions {
    option (cel.validate.service) = {
        rule: {
            options: {
                globals: {
                    constants: [{
                        key: "isAdmHdr"
                        value: "x-is-admin"
                    }]
                }
            }
            programs: {
                expr: 'attribute_context.request.headers[isAdmHdr] == "true"'
            }
        }
    };
    rpc Rpc(google.protobuf.Empty) returns (google.protobuf.Empty) {};
}