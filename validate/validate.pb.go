// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: validate/validate.proto

package validate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Options_Overloads_Type_Primitive int32

const (
	Options_Overloads_Type_PRIMITIVE_UNSPECIFIED Options_Overloads_Type_Primitive = 0
	Options_Overloads_Type_BOOL                  Options_Overloads_Type_Primitive = 1
	Options_Overloads_Type_INT                   Options_Overloads_Type_Primitive = 2
	Options_Overloads_Type_UINT                  Options_Overloads_Type_Primitive = 3
	Options_Overloads_Type_DOUBLE                Options_Overloads_Type_Primitive = 4
	Options_Overloads_Type_BYTES                 Options_Overloads_Type_Primitive = 5
	Options_Overloads_Type_STRING                Options_Overloads_Type_Primitive = 6
	Options_Overloads_Type_DURATION              Options_Overloads_Type_Primitive = 7
	Options_Overloads_Type_TIMESTAMP             Options_Overloads_Type_Primitive = 8
	Options_Overloads_Type_ERROR                 Options_Overloads_Type_Primitive = 9
	Options_Overloads_Type_DYN                   Options_Overloads_Type_Primitive = 10
	Options_Overloads_Type_ANY                   Options_Overloads_Type_Primitive = 11
)

// Enum value maps for Options_Overloads_Type_Primitive.
var (
	Options_Overloads_Type_Primitive_name = map[int32]string{
		0:  "PRIMITIVE_UNSPECIFIED",
		1:  "BOOL",
		2:  "INT",
		3:  "UINT",
		4:  "DOUBLE",
		5:  "BYTES",
		6:  "STRING",
		7:  "DURATION",
		8:  "TIMESTAMP",
		9:  "ERROR",
		10: "DYN",
		11: "ANY",
	}
	Options_Overloads_Type_Primitive_value = map[string]int32{
		"PRIMITIVE_UNSPECIFIED": 0,
		"BOOL":                  1,
		"INT":                   2,
		"UINT":                  3,
		"DOUBLE":                4,
		"BYTES":                 5,
		"STRING":                6,
		"DURATION":              7,
		"TIMESTAMP":             8,
		"ERROR":                 9,
		"DYN":                   10,
		"ANY":                   11,
	}
)

func (x Options_Overloads_Type_Primitive) Enum() *Options_Overloads_Type_Primitive {
	p := new(Options_Overloads_Type_Primitive)
	*p = x
	return p
}

func (x Options_Overloads_Type_Primitive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options_Overloads_Type_Primitive) Descriptor() protoreflect.EnumDescriptor {
	return file_validate_validate_proto_enumTypes[0].Descriptor()
}

func (Options_Overloads_Type_Primitive) Type() protoreflect.EnumType {
	return &file_validate_validate_proto_enumTypes[0]
}

func (x Options_Overloads_Type_Primitive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options_Overloads_Type_Primitive.Descriptor instead.
func (Options_Overloads_Type_Primitive) EnumDescriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Globals                 *Options_Globals   `protobuf:"bytes,1,opt,name=globals,proto3" json:"globals,omitempty"`
	Overloads               *Options_Overloads `protobuf:"bytes,2,opt,name=overloads,proto3" json:"overloads,omitempty"`
	StdlibOverridingEnabled bool               `protobuf:"varint,3,opt,name=stdlib_overriding_enabled,json=stdlibOverridingEnabled,proto3" json:"stdlib_overriding_enabled,omitempty"`
}

func (x *Options) Reset() {
	*x = Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0}
}

func (x *Options) GetGlobals() *Options_Globals {
	if x != nil {
		return x.Globals
	}
	return nil
}

func (x *Options) GetOverloads() *Options_Overloads {
	if x != nil {
		return x.Overloads
	}
	return nil
}

func (x *Options) GetStdlibOverridingEnabled() bool {
	if x != nil {
		return x.StdlibOverridingEnabled
	}
	return false
}

type FileRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options      *Options                `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	ServiceRules map[string]*ServiceRule `protobuf:"bytes,2,rep,name=service_rules,json=serviceRules,proto3" json:"service_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MessageRules map[string]*MessageRule `protobuf:"bytes,3,rep,name=message_rules,json=messageRules,proto3" json:"message_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileRule) Reset() {
	*x = FileRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRule) ProtoMessage() {}

func (x *FileRule) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRule.ProtoReflect.Descriptor instead.
func (*FileRule) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{1}
}

func (x *FileRule) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *FileRule) GetServiceRules() map[string]*ServiceRule {
	if x != nil {
		return x.ServiceRules
	}
	return nil
}

func (x *FileRule) GetMessageRules() map[string]*MessageRule {
	if x != nil {
		return x.MessageRules
	}
	return nil
}

type ServiceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options     *Options               `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Rule        *Rule                  `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	MethodRules map[string]*MethodRule `protobuf:"bytes,3,rep,name=method_rules,json=methodRules,proto3" json:"method_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceRule) Reset() {
	*x = ServiceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRule) ProtoMessage() {}

func (x *ServiceRule) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRule.ProtoReflect.Descriptor instead.
func (*ServiceRule) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceRule) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ServiceRule) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *ServiceRule) GetMethodRules() map[string]*MethodRule {
	if x != nil {
		return x.MethodRules
	}
	return nil
}

type MethodRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *MethodRule) Reset() {
	*x = MethodRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRule) ProtoMessage() {}

func (x *MethodRule) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRule.ProtoReflect.Descriptor instead.
func (*MethodRule) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{3}
}

func (x *MethodRule) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type MessageRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options    *Options              `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Rule       *Rule                 `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	FieldRules map[string]*FieldRule `protobuf:"bytes,3,rep,name=field_rules,json=fieldRules,proto3" json:"field_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MessageRule) Reset() {
	*x = MessageRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRule) ProtoMessage() {}

func (x *MessageRule) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRule.ProtoReflect.Descriptor instead.
func (*MessageRule) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{4}
}

func (x *MessageRule) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *MessageRule) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *MessageRule) GetFieldRules() map[string]*FieldRule {
	if x != nil {
		return x.FieldRules
	}
	return nil
}

type FieldRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule     *Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Required bool  `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *FieldRule) Reset() {
	*x = FieldRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRule) ProtoMessage() {}

func (x *FieldRule) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRule.ProtoReflect.Descriptor instead.
func (*FieldRule) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{5}
}

func (x *FieldRule) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *FieldRule) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options  *Options        `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Programs []*Rule_Program `protobuf:"bytes,2,rep,name=programs,proto3" json:"programs,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{6}
}

func (x *Rule) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Rule) GetPrograms() []*Rule_Program {
	if x != nil {
		return x.Programs
	}
	return nil
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule                             *FileRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	RequiredSupportDisabled          bool      `protobuf:"varint,2,opt,name=required_support_disabled,json=requiredSupportDisabled,proto3" json:"required_support_disabled,omitempty"`
	ResourceReferenceSupportDisabled bool      `protobuf:"varint,3,opt,name=resource_reference_support_disabled,json=resourceReferenceSupportDisabled,proto3" json:"resource_reference_support_disabled,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{7}
}

func (x *Configuration) GetRule() *FileRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Configuration) GetRequiredSupportDisabled() bool {
	if x != nil {
		return x.RequiredSupportDisabled
	}
	return false
}

func (x *Configuration) GetResourceReferenceSupportDisabled() bool {
	if x != nil {
		return x.ResourceReferenceSupportDisabled
	}
	return false
}

type Options_Globals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Functions map[string]string `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Constants map[string]string `protobuf:"bytes,2,rep,name=constants,proto3" json:"constants,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Options_Globals) Reset() {
	*x = Options_Globals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Globals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Globals) ProtoMessage() {}

func (x *Options_Globals) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Globals.ProtoReflect.Descriptor instead.
func (*Options_Globals) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Options_Globals) GetFunctions() map[string]string {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *Options_Globals) GetConstants() map[string]string {
	if x != nil {
		return x.Constants
	}
	return nil
}

type Options_Overloads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Functions map[string]*Options_Overloads_Function `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Variables map[string]*Options_Overloads_Type     `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Options_Overloads) Reset() {
	*x = Options_Overloads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Overloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Overloads) ProtoMessage() {}

func (x *Options_Overloads) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Overloads.ProtoReflect.Descriptor instead.
func (*Options_Overloads) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Options_Overloads) GetFunctions() map[string]*Options_Overloads_Function {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *Options_Overloads) GetVariables() map[string]*Options_Overloads_Type {
	if x != nil {
		return x.Variables
	}
	return nil
}

type Options_Overloads_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Options_Overloads_Type_Primitive_
	//	*Options_Overloads_Type_Object
	//	*Options_Overloads_Type_Array_
	//	*Options_Overloads_Type_Map_
	Type isOptions_Overloads_Type_Type `protobuf_oneof:"type"`
}

func (x *Options_Overloads_Type) Reset() {
	*x = Options_Overloads_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Overloads_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Overloads_Type) ProtoMessage() {}

func (x *Options_Overloads_Type) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Overloads_Type.ProtoReflect.Descriptor instead.
func (*Options_Overloads_Type) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Options_Overloads_Type) GetType() isOptions_Overloads_Type_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Options_Overloads_Type) GetPrimitive() Options_Overloads_Type_Primitive {
	if x, ok := x.GetType().(*Options_Overloads_Type_Primitive_); ok {
		return x.Primitive
	}
	return Options_Overloads_Type_PRIMITIVE_UNSPECIFIED
}

func (x *Options_Overloads_Type) GetObject() string {
	if x, ok := x.GetType().(*Options_Overloads_Type_Object); ok {
		return x.Object
	}
	return ""
}

func (x *Options_Overloads_Type) GetArray() *Options_Overloads_Type_Array {
	if x, ok := x.GetType().(*Options_Overloads_Type_Array_); ok {
		return x.Array
	}
	return nil
}

func (x *Options_Overloads_Type) GetMap() *Options_Overloads_Type_Map {
	if x, ok := x.GetType().(*Options_Overloads_Type_Map_); ok {
		return x.Map
	}
	return nil
}

type isOptions_Overloads_Type_Type interface {
	isOptions_Overloads_Type_Type()
}

type Options_Overloads_Type_Primitive_ struct {
	Primitive Options_Overloads_Type_Primitive `protobuf:"varint,1,opt,name=primitive,proto3,enum=cel.validate.Options_Overloads_Type_Primitive,oneof"`
}

type Options_Overloads_Type_Object struct {
	Object string `protobuf:"bytes,2,opt,name=object,proto3,oneof"`
}

type Options_Overloads_Type_Array_ struct {
	Array *Options_Overloads_Type_Array `protobuf:"bytes,3,opt,name=array,proto3,oneof"`
}

type Options_Overloads_Type_Map_ struct {
	Map *Options_Overloads_Type_Map `protobuf:"bytes,4,opt,name=map,proto3,oneof"`
}

func (*Options_Overloads_Type_Primitive_) isOptions_Overloads_Type_Type() {}

func (*Options_Overloads_Type_Object) isOptions_Overloads_Type_Type() {}

func (*Options_Overloads_Type_Array_) isOptions_Overloads_Type_Type() {}

func (*Options_Overloads_Type_Map_) isOptions_Overloads_Type_Type() {}

type Options_Overloads_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args   []*Options_Overloads_Type `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	Result *Options_Overloads_Type   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Options_Overloads_Function) Reset() {
	*x = Options_Overloads_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Overloads_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Overloads_Function) ProtoMessage() {}

func (x *Options_Overloads_Function) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Overloads_Function.ProtoReflect.Descriptor instead.
func (*Options_Overloads_Function) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Options_Overloads_Function) GetArgs() []*Options_Overloads_Type {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Options_Overloads_Function) GetResult() *Options_Overloads_Type {
	if x != nil {
		return x.Result
	}
	return nil
}

type Options_Overloads_Type_Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Options_Overloads_Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Options_Overloads_Type_Array) Reset() {
	*x = Options_Overloads_Type_Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Overloads_Type_Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Overloads_Type_Array) ProtoMessage() {}

func (x *Options_Overloads_Type_Array) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Overloads_Type_Array.ProtoReflect.Descriptor instead.
func (*Options_Overloads_Type_Array) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Options_Overloads_Type_Array) GetType() *Options_Overloads_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type Options_Overloads_Type_Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *Options_Overloads_Type `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Options_Overloads_Type `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Options_Overloads_Type_Map) Reset() {
	*x = Options_Overloads_Type_Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options_Overloads_Type_Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options_Overloads_Type_Map) ProtoMessage() {}

func (x *Options_Overloads_Type_Map) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options_Overloads_Type_Map.ProtoReflect.Descriptor instead.
func (*Options_Overloads_Type_Map) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Options_Overloads_Type_Map) GetKey() *Options_Overloads_Type {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Options_Overloads_Type_Map) GetValue() *Options_Overloads_Type {
	if x != nil {
		return x.Value
	}
	return nil
}

type Rule_Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Expr string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Rule_Program) Reset() {
	*x = Rule_Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validate_validate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Program) ProtoMessage() {}

func (x *Rule_Program) ProtoReflect() protoreflect.Message {
	mi := &file_validate_validate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Program.ProtoReflect.Descriptor instead.
func (*Rule_Program) Descriptor() ([]byte, []int) {
	return file_validate_validate_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Rule_Program) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Rule_Program) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

var file_validate_validate_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*FileRule)(nil),
		Field:         1178,
		Name:          "cel.validate.file",
		Tag:           "bytes,1178,opt,name=file",
		Filename:      "validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ServiceRule)(nil),
		Field:         1178,
		Name:          "cel.validate.service",
		Tag:           "bytes,1178,opt,name=service",
		Filename:      "validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*MethodRule)(nil),
		Field:         1178,
		Name:          "cel.validate.method",
		Tag:           "bytes,1178,opt,name=method",
		Filename:      "validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*MessageRule)(nil),
		Field:         1178,
		Name:          "cel.validate.message",
		Tag:           "bytes,1178,opt,name=message",
		Filename:      "validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRule)(nil),
		Field:         1178,
		Name:          "cel.validate.field",
		Tag:           "bytes,1178,opt,name=field",
		Filename:      "validate/validate.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional cel.validate.FileRule file = 1178;
	E_File = &file_validate_validate_proto_extTypes[0]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional cel.validate.ServiceRule service = 1178;
	E_Service = &file_validate_validate_proto_extTypes[1]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional cel.validate.MethodRule method = 1178;
	E_Method = &file_validate_validate_proto_extTypes[2]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional cel.validate.MessageRule message = 1178;
	E_Message = &file_validate_validate_proto_extTypes[3]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional cel.validate.FieldRule field = 1178;
	E_Field = &file_validate_validate_proto_extTypes[4]
)

var File_validate_validate_proto protoreflect.FileDescriptor

var file_validate_validate_proto_rawDesc = []byte{
	0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x65, 0x6c, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x0c, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x73, 0x52, 0x07, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x12, 0x3d,
	0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x9d, 0x02, 0x0a, 0x07, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x3c, 0x0a,
	0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd6, 0x08, 0x0a, 0x09, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x6c,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x1a, 0xdb, 0x04, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x03, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x41, 0x0a, 0x05, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x79, 0x0a, 0x03, 0x4d,
	0x61, 0x70, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x6c, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x59, 0x4e, 0x10, 0x0a,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x0b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x82, 0x01, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x66, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x6c, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62,
	0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x91, 0x03, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x5a,
	0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x11, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x4d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x58,
	0x0a, 0x10, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x8a,
	0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x09, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x9e, 0x01, 0x0a,
	0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x2d,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xc6, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x23, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x49, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9a, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x3a, 0x55, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9a, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x51, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x9a, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x6c, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x55, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9a, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x3a, 0x4d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9a, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x6c, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x6c, 0x61, 0x63, 0x68, 0x66, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x63, 0x65, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_validate_validate_proto_rawDescOnce sync.Once
	file_validate_validate_proto_rawDescData = file_validate_validate_proto_rawDesc
)

func file_validate_validate_proto_rawDescGZIP() []byte {
	file_validate_validate_proto_rawDescOnce.Do(func() {
		file_validate_validate_proto_rawDescData = protoimpl.X.CompressGZIP(file_validate_validate_proto_rawDescData)
	})
	return file_validate_validate_proto_rawDescData
}

var file_validate_validate_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_validate_validate_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_validate_validate_proto_goTypes = []interface{}{
	(Options_Overloads_Type_Primitive)(0), // 0: cel.validate.Options.Overloads.Type.Primitive
	(*Options)(nil),                       // 1: cel.validate.Options
	(*FileRule)(nil),                      // 2: cel.validate.FileRule
	(*ServiceRule)(nil),                   // 3: cel.validate.ServiceRule
	(*MethodRule)(nil),                    // 4: cel.validate.MethodRule
	(*MessageRule)(nil),                   // 5: cel.validate.MessageRule
	(*FieldRule)(nil),                     // 6: cel.validate.FieldRule
	(*Rule)(nil),                          // 7: cel.validate.Rule
	(*Configuration)(nil),                 // 8: cel.validate.Configuration
	(*Options_Globals)(nil),               // 9: cel.validate.Options.Globals
	(*Options_Overloads)(nil),             // 10: cel.validate.Options.Overloads
	nil,                                   // 11: cel.validate.Options.Globals.FunctionsEntry
	nil,                                   // 12: cel.validate.Options.Globals.ConstantsEntry
	(*Options_Overloads_Type)(nil),        // 13: cel.validate.Options.Overloads.Type
	(*Options_Overloads_Function)(nil),    // 14: cel.validate.Options.Overloads.Function
	nil,                                   // 15: cel.validate.Options.Overloads.FunctionsEntry
	nil,                                   // 16: cel.validate.Options.Overloads.VariablesEntry
	(*Options_Overloads_Type_Array)(nil),  // 17: cel.validate.Options.Overloads.Type.Array
	(*Options_Overloads_Type_Map)(nil),    // 18: cel.validate.Options.Overloads.Type.Map
	nil,                                   // 19: cel.validate.FileRule.ServiceRulesEntry
	nil,                                   // 20: cel.validate.FileRule.MessageRulesEntry
	nil,                                   // 21: cel.validate.ServiceRule.MethodRulesEntry
	nil,                                   // 22: cel.validate.MessageRule.FieldRulesEntry
	(*Rule_Program)(nil),                  // 23: cel.validate.Rule.Program
	(*descriptorpb.FileOptions)(nil),      // 24: google.protobuf.FileOptions
	(*descriptorpb.ServiceOptions)(nil),   // 25: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),    // 26: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil),   // 27: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),     // 28: google.protobuf.FieldOptions
}
var file_validate_validate_proto_depIdxs = []int32{
	9,  // 0: cel.validate.Options.globals:type_name -> cel.validate.Options.Globals
	10, // 1: cel.validate.Options.overloads:type_name -> cel.validate.Options.Overloads
	1,  // 2: cel.validate.FileRule.options:type_name -> cel.validate.Options
	19, // 3: cel.validate.FileRule.service_rules:type_name -> cel.validate.FileRule.ServiceRulesEntry
	20, // 4: cel.validate.FileRule.message_rules:type_name -> cel.validate.FileRule.MessageRulesEntry
	1,  // 5: cel.validate.ServiceRule.options:type_name -> cel.validate.Options
	7,  // 6: cel.validate.ServiceRule.rule:type_name -> cel.validate.Rule
	21, // 7: cel.validate.ServiceRule.method_rules:type_name -> cel.validate.ServiceRule.MethodRulesEntry
	7,  // 8: cel.validate.MethodRule.rule:type_name -> cel.validate.Rule
	1,  // 9: cel.validate.MessageRule.options:type_name -> cel.validate.Options
	7,  // 10: cel.validate.MessageRule.rule:type_name -> cel.validate.Rule
	22, // 11: cel.validate.MessageRule.field_rules:type_name -> cel.validate.MessageRule.FieldRulesEntry
	7,  // 12: cel.validate.FieldRule.rule:type_name -> cel.validate.Rule
	1,  // 13: cel.validate.Rule.options:type_name -> cel.validate.Options
	23, // 14: cel.validate.Rule.programs:type_name -> cel.validate.Rule.Program
	2,  // 15: cel.validate.Configuration.rule:type_name -> cel.validate.FileRule
	11, // 16: cel.validate.Options.Globals.functions:type_name -> cel.validate.Options.Globals.FunctionsEntry
	12, // 17: cel.validate.Options.Globals.constants:type_name -> cel.validate.Options.Globals.ConstantsEntry
	15, // 18: cel.validate.Options.Overloads.functions:type_name -> cel.validate.Options.Overloads.FunctionsEntry
	16, // 19: cel.validate.Options.Overloads.variables:type_name -> cel.validate.Options.Overloads.VariablesEntry
	0,  // 20: cel.validate.Options.Overloads.Type.primitive:type_name -> cel.validate.Options.Overloads.Type.Primitive
	17, // 21: cel.validate.Options.Overloads.Type.array:type_name -> cel.validate.Options.Overloads.Type.Array
	18, // 22: cel.validate.Options.Overloads.Type.map:type_name -> cel.validate.Options.Overloads.Type.Map
	13, // 23: cel.validate.Options.Overloads.Function.args:type_name -> cel.validate.Options.Overloads.Type
	13, // 24: cel.validate.Options.Overloads.Function.result:type_name -> cel.validate.Options.Overloads.Type
	14, // 25: cel.validate.Options.Overloads.FunctionsEntry.value:type_name -> cel.validate.Options.Overloads.Function
	13, // 26: cel.validate.Options.Overloads.VariablesEntry.value:type_name -> cel.validate.Options.Overloads.Type
	13, // 27: cel.validate.Options.Overloads.Type.Array.type:type_name -> cel.validate.Options.Overloads.Type
	13, // 28: cel.validate.Options.Overloads.Type.Map.key:type_name -> cel.validate.Options.Overloads.Type
	13, // 29: cel.validate.Options.Overloads.Type.Map.value:type_name -> cel.validate.Options.Overloads.Type
	3,  // 30: cel.validate.FileRule.ServiceRulesEntry.value:type_name -> cel.validate.ServiceRule
	5,  // 31: cel.validate.FileRule.MessageRulesEntry.value:type_name -> cel.validate.MessageRule
	4,  // 32: cel.validate.ServiceRule.MethodRulesEntry.value:type_name -> cel.validate.MethodRule
	6,  // 33: cel.validate.MessageRule.FieldRulesEntry.value:type_name -> cel.validate.FieldRule
	24, // 34: cel.validate.file:extendee -> google.protobuf.FileOptions
	25, // 35: cel.validate.service:extendee -> google.protobuf.ServiceOptions
	26, // 36: cel.validate.method:extendee -> google.protobuf.MethodOptions
	27, // 37: cel.validate.message:extendee -> google.protobuf.MessageOptions
	28, // 38: cel.validate.field:extendee -> google.protobuf.FieldOptions
	2,  // 39: cel.validate.file:type_name -> cel.validate.FileRule
	3,  // 40: cel.validate.service:type_name -> cel.validate.ServiceRule
	4,  // 41: cel.validate.method:type_name -> cel.validate.MethodRule
	5,  // 42: cel.validate.message:type_name -> cel.validate.MessageRule
	6,  // 43: cel.validate.field:type_name -> cel.validate.FieldRule
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	39, // [39:44] is the sub-list for extension type_name
	34, // [34:39] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_validate_validate_proto_init() }
func file_validate_validate_proto_init() {
	if File_validate_validate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_validate_validate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Globals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Overloads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Overloads_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Overloads_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Overloads_Type_Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options_Overloads_Type_Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validate_validate_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_validate_validate_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Options_Overloads_Type_Primitive_)(nil),
		(*Options_Overloads_Type_Object)(nil),
		(*Options_Overloads_Type_Array_)(nil),
		(*Options_Overloads_Type_Map_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validate_validate_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_validate_validate_proto_goTypes,
		DependencyIndexes: file_validate_validate_proto_depIdxs,
		EnumInfos:         file_validate_validate_proto_enumTypes,
		MessageInfos:      file_validate_validate_proto_msgTypes,
		ExtensionInfos:    file_validate_validate_proto_extTypes,
	}.Build()
	File_validate_validate_proto = out.File
	file_validate_validate_proto_rawDesc = nil
	file_validate_validate_proto_goTypes = nil
	file_validate_validate_proto_depIdxs = nil
}
